#! /bin/bash
# Exit if any command returns non-zero status
set +e

###########################
# Author: Pooja Gupta

USAGE="
Purpose:
1) Run Freyja tool with wastewater sequencing data. 
2) Retrieve BAM files for each sample generated by Viralrecon and perform Freyja analysis
3) Note the input data are the bam files after ivar primer trimming step.

Usage:
run_freyja.sh <wastewater sequencing run_name> | tee -a freyja.log
Last updated on: September 18,2023
"
###########################

echo "$USAGE"

run_name=$1

echo "$(date): Set paths to run directory and freyja post-processing script."
analysis_dir=/Volumes/IDGenomics_NAS/wastewater_sequencing
freyja_cln_tsv=/Volumes/NGS/Bioinformatics/pooja/ww_analysis_scripts/Wastewater-genomic-analysis/utils/freyja_custom_lin_processing.py


echo "$(date): Create required folders for Freyja analysis if they do not exist."
mkdir -p /Volumes/IDGenomics_NAS/wastewater_sequencing/$run_name/analysis/freyja/lineage_out

echo "$(date): Define working, input and output directories."
workdir=$analysis_dir/$run_name/analysis/freyja
in_dir=$analysis_dir/$run_name/analysis/viralrecon/variants/bowtie2
outdir=$workdir/lineage_out/
results=$analysis_dir/$run_name/results
coverage_file="${analysis_dir}/${run_name}/results/${run_name}_summary_variants_metrics_mqc.csv"

echo "$(date): Set reference SARS-CoV-2 genome location."
scov2=$analysis_dir/covidseq_ref/MN908947.3.fasta

# Define the path to the status file, used to track how many samples have been processed.
status_file="/Volumes/IDGenomics_NAS/wastewater_sequencing/$run_name/logs/freyja_demix_status.txt"

# Create the status file if it does not exist
touch "$status_file"

echo "$(date): Pull in the latest Freyja container with updated barcodes." >> $status_file
singularity pull -F --name uphl-freyja-latest.simg docker://quay.io/uphl/freyja:latest

echo "$(date): Starting Freyja" >> $status_file
echo "$(date): Getting the input variants and depth file from bam files for Freyja analysis" >> $status_file

# Function to retrieve genome coverage from csv
get_coverage() {
    local file="$1"
    grep -E "^$file," "${coverage_file}" | awk -F',' '{print $10}'
}

coverage_threshold=40  # Set 40% as the threshold

# Loop over each BAM file in input directory, perform Freyja variant analysis, and demultiplex each sample to get lineages

for bam in ${in_dir}/*.ivar_trim.sorted.bam; 
do
    # Extracting just the identifier from the bam filename
    identifier=$(basename "$bam" .ivar_trim.sorted.bam)
    
    coverage=$(get_coverage "$identifier")
    
    if (( $(echo "$coverage >= $coverage_threshold" | bc -l) )); then
        echo "$(date): input file name is $bam"
        sample=${identifier%-UT*} 
        echo "$(date): base name is $sample" >> $status_file
        echo "$(date): Running Freyja variants step for $sample" >> $status_file

        singularity exec --bind ${analysis_dir} uphl-freyja-latest.simg freyja variants ${bam} --variants $workdir/${sample}_out_variants --depths $workdir/${sample}_out_depths --ref ${scov2}
    else
        echo "$(date): Skipping $bam due to insufficient genome coverage." >> $status_file
    fi

    depth=${sample}_out_depths
    var=${sample}_out_variants.tsv

    #depth_path="$workdir/${var}" 
    #var_path="$workdir/${depth}"

    #output_file="$outdir${sample}_lin_out.tsv"
    echo "$(date): Running Demultiplexing step for $sample" >> $status_file
    singularity exec --bind ${analysis_dir} uphl-freyja-latest.simg freyja demix $workdir/${var} $workdir/${depth} --eps 0.01 --covcut 10 --confirmedonly --output $outdir${sample}_lin_out.tsv

    #echo "$(date): Boostrap analysis step running for $sample" | tee -a $log_file
    #freyja boot $workdir/${var} $workdir/${depth} --nt 8 --nb 500 --eps 0.01 --output_base $outdir${sample}_boot.tsv

    # Check the exit status of the 'freyja demix' command. This is useful for tracking which samples failed at the demultiplex stage.
    if [ $? -eq 0 ]; then
        if [ -f "${outdir}/${sample}_lin_out.tsv" ]; then
        echo "Run $run_name: Sample $sample processed successfully." >> $status_file
        fi
    else
        echo "Run $run_name: Sample $sample did not process successfully. SolverError: Solver 'ECOS' failed. Skipping this sample." >> $status_file
    fi

done

echo "$(date): Demultiplexing step completed and results are stored in $outdir" >> $status_file
echo "$(date): Running lineage aggregation step in Freyja"

singularity exec --bind ${analysis_dir} uphl-freyja-latest.simg freyja aggregate $outdir --output $outdir${run_name}_lineages_aggregate.tsv --ext tsv

#echo "$(date): Plotting lineage aggregate output from Frejya"
#singularity exec --bind ${analysis_dir} uphl-freyja-latest.simg freyja plot ${outdir}${run_name}_lineages_aggregate.tsv --output $outdir${run_name}_lineages_aggregate_plot.png --lineages

# Check if Freyja analysis completed successfully and the aggregate output file is generated
if [ -f "${outdir}${run_name}_lineages_aggregate.tsv" ]; then
    echo "$(date): Lineage aggregration completed and aggregrated tsv is stored in $outdir. Freyja analysis completed"
else
    echo "$(date): Lineage aggregration failed. Please check the input files and try again."
    exit 1
fi

echo "$(date) : Copying Freyja aggregate lineage results to $results"
#cd $outdir
cp $outdir*lineages_aggregate.tsv $results

echo "$(date): Extracting freyja lineage dictionary results and converting it to a long dataframe for downstream processing using the python script freyja_custom_lin_processing.py"
/home/linuxbrew/.linuxbrew/bin/python3 ${freyja_cln_tsv} ${run_name}

echo "$(date): Freyja analysis post-processing completed. Next step would be to aggregate result from this sequencing run with the previous run results using another python script freyja_old_new_res_merge.py <new_run_directory> <old_results_date>"